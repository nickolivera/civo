user: civo
ssh_shell: /bin/bash
inventory: inventory.yml

tasks:
  - name: prep
    commands:
      - script: sudo apt-get update
      - script: sudo apt-get upgrade -y
      - script: sudo apt-get autoremove -y
      - script: sudo apt-get clean
      - script: sudo DEBIAN_FRONTEND=noninteractive apt-get install -y apt-transport-https ca-certificates curl gpg net-tools
      - name: network
        script: |

          # https://v1-29.docs.kubernetes.io/docs/setup/production-environment/container-runtimes/#install-and-configure-prerequisites

          cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
          overlay
          br_netfilter
          EOF

          sudo modprobe overlay
          sudo modprobe br_netfilter

          # sysctl params required by setup, params persist across reboots
          cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
          net.bridge.bridge-nf-call-iptables  = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward                 = 1
          EOF

          # Apply sysctl params without reboot
          sudo sysctl --system
          sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward

      - name: containerd
        script: |
          # containerd
          #https://docs.docker.com/engine/install/debian/
          # Add Docker's official GPG key:
          sudo apt-get update
          sudo apt-get install ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc

          # Add the repository to Apt sources:
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
            $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
            sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
          sudo containerd config default | sudo tee /etc/containerd/config.toml
          ps -p 1
          sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
      # - name: containerd-config
      #   script: |
      #     echo '[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
      #       [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
      #         SystemdCgroup = true' | sudo tee /etc/containerd/config.toml > /dev/null

      - name: containerd-finish
        script: |

          sudo systemctl restart containerd
          
          sudo systemctl enable --now containerd
          # sudo docker run hello-world
  - name: kubeadm
    commands:
      #apt list -a kubeadm
      - name: kubernetes-key
        script: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | sudo gpg --batch --yes --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      - name: kubernetes-list
        script: |
          sudo sh -c 'cat <<EOF > /etc/apt/sources.list.d/kubernetes.list
          deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /
          EOF'
      - name: kubernetes-update
        script: sudo apt-get update

      - name: kubelet-install
        script: sudo DEBIAN_FRONTEND=noninteractive apt-get install -y kubelet=1.29.7-1.1 kubeadm=1.29.7-1.1 kubectl=1.29.7-1.1
      - name: kubelet-hold
        script: sudo apt-mark hold kubelet kubeadm kubectl
      - name: kubelet-enable
        script: sudo systemctl enable --now kubelet
  - name: boostrap-control
    commands:
      - name: boostrap-control
        script: |
          sudo kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=$MAIN_PRIVATE_IP --kubernetes-version=1.29.7 --cri-socket unix:///run/containerd/containerd.sock
          mkdir -p /tmp/creds
          sudo kubeadm token create --print-join-command > /tmp/creds/join.sh
          # sudo sed -i 's/$MAIN_PRIVATE_IP/$MAIN_IP/' /tmp/creds/admin.conf
          sudo cp /etc/kubernetes/admin.conf /tmp/creds/admin.conf
          sudo chmod a+r /tmp/creds/*
          mkdir -p $HOME/.kube
          sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
          sudo chown $(id -u):$(id -g) $HOME/.kube/config
  - name: boostrap-control-flannel
    commands:
      - name: boostrap-control-flannel
        script: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
  - name: node-creds
    options: {local: true}
    commands:
      - script: rm -f join.sh && rm -f admin.sh && scp -o StrictHostKeyChecking=no civo@$(tofu output -raw main_ip):/tmp/creds/join.sh . && scp -o StrictHostKeyChecking=no civo@$(tofu output -raw main_ip):/tmp/creds/admin.conf . && sed -i '' "s/$MAIN_PRIVATE_IP/$MAIN_IP/" admin.conf

  - name: node-creds-clean
    commands:
      - script: sudo rm -fr /tmp/creds/
  - name: node-boostrap
    commands:
      - name: "copy script"
        copy: {src: "join.sh", "dst": "/tmp/join.sh", "chmod+x": true}
  - name: node-boostrap-join
    commands:
      - name: "copy script"
        script: sudo bash /tmp/join.sh && rm /tmp/join.sh
  - name: verify
    commands:
      - echo: $(kubectl get nodes)
      - echo: $(kubectl get pods -A)
